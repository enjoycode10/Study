<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<!--MyBatis核心配置文件-->
<configuration>
    <!--引入外部配置文件 mybatis.properties（优先）
    这些属性可以在外部进行配置，并可以进行动态替换。你既可以在典型的 Java 属性文件中配置这些属性，也可以在 properties 元素的子元素中设置。-->
    <properties resource="mybatis.properties">
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>
    </properties>

    <settings>
        <!--全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。-->
        <setting name="cacheEnabled" value="true"/>
        <!--延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 fetchType 属性来覆盖该项的开关状态。-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!--指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
        SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING-->
        <setting name="logImpl" value="LOG4J"/>
    </settings>

    <!--类型别名可为 Java 类型设置一个缩写名字。-->
    <typeAliases>
        <!--当这样配置时，User 可以用在任何使用 com.okgo.mybatis.model.User 的地方。-->
        <typeAlias alias="User" type="com.okgo.mybatis.model.User"/>
        <typeAlias alias="Student" type="com.okgo.mybatis.model.Student"/>
        <typeAlias alias="Teacher" type="com.okgo.mybatis.model.Teacher"/>
        <!--也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean
        每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。
        比如 com.okgo.mybatis.model.User 的别名为 user；若有注解，则别名为其注解值。
            @Alias("author")
            public class Author {
                ...
            }
        -->
        <!--<package name="com.okgo.mybatis.model"/>-->
    </typeAliases>

    <!--MyBatis 可以配置成适应多种环境，这种机制有助于将 SQL 映射应用于多种数据库之中。
    例如，开发、测试和生产环境需要有不同的配置；或者想在具有相同 Schema 的多个生产数据库中使用相同的 SQL 映射。-->

    <!--尽管可以配置多个环境，但每个 SqlSessionFactory 实例只能选择一种环境。
    如果你想连接两个数据库，就需要创建两个 SqlSessionFactory 实例，每个数据库对应一个。而如果是三个数据库，就需要三个实例，-->
    <environments default="development">
        <environment id="development">
            <!--在 MyBatis 中有两种类型的事务管理器（也就是 type="[JDBC|MANAGED]"）：
            * JDBC – 这个配置直接使用了 JDBC 的提交和回滚设施，它依赖从数据源获得的连接来管理事务作用域。
            * MANAGED – 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。
            默认情况下它会关闭连接。然而一些容器并不希望连接被关闭，因此需要将 closeConnection 属性设置为 false 来阻止默认的关闭行为。
            如果你正在使用 Spring + MyBatis，则没有必要配置事务管理器，因为 Spring 模块会使用自带的管理器来覆盖前面的配置。-->
            <transactionManager type="JDBC"/>

            <!--dataSource 元素使用标准的 JDBC 数据源接口来配置 JDBC 连接对象的资源。

            大多数 MyBatis 应用程序会按示例中的例子来配置数据源。虽然数据源配置是可选的，但如果要启用延迟加载特性，就必须配置数据源。
            有三种内建的数据源类型（也就是 type="[UNPOOLED|POOLED|JNDI]"）-->
            <dataSource type="POOLED">
                <property name="driver" value="${driver}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>

        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="com.mysql.jdbc.Driver"/>
                <property name="url"
                          value="jdbc:mysql://localhost:3306/miaosha?useSSL=true&amp;useUnicode=true&amp;characterEncoding=UTF8"/>
                <property name="username" value="root"/>
                <property name="password" value="1235"/>
            </dataSource>
        </environment>
    </environments>
    <mappers>
        <!-- 使用相对于类路径的资源引用 -->
        <mapper resource="com/okgo/mybatis/dao/mapper/UserMapper.xml"/>
        <mapper resource="com/okgo/mybatis/dao/mapper/StudentMapper.xml"/>
        <mapper resource="com/okgo/mybatis/dao/mapper/TeacherMapper.xml"/>
        <!--<mapper resource="com/okgo/mybatis/dao/mapper/*.xml"/>-->
        <!-- 使用完全限定资源定位符（URL） 基本不用-->
        <!--        <mapper url="file:///var/mappers/AuthorMapper.xml"/>-->
        <!-- 使用映射器接口实现类的完全限定类名
        接口和mapper配置文件必须同名，且必须在同一个包下-->
        <!--<mapper class="com.okgo.mybatis.dao.UserDao"/>
        <mapper class="com.okgo.mybatis.dao.StudentDao"/>
        <mapper class="com.okgo.mybatis.dao.TeacherDao"/>-->
        <!-- 将包内的映射器接口实现全部注册为映射器 -->
        <!--        <package name="org.mybatis.builder"/>-->
    </mappers>
</configuration>